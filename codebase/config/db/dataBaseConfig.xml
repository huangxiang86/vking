<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<context:annotation-config />

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>config/db/dbConfig.properties</value>
				<value>config/db/hirbernateConfig.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${db.driverClass}" />
		<property name="jdbcUrl" value="${db.jdbcUrl}" />
		<property name="user" value="${db.user}" />
		<property name="password" value="${db.password}" />
		<property name="maxPoolSize" value="${db.maxPoolSize}" />
		<property name="initialPoolSize" value="${db.initialPoolSize}" />
	</bean>


	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 引入数据源 -->
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<!-- 数据库方言 -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- 是否需要展示SQL -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- 是否需要格式化SQL -->
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- 是否自动更新表 -->
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<!-- 是否自动提交 -->
				<prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
				<!-- 指定在何时释放数据源 -->
				<prop key="hibernate.connection.release_mode">${hibernate.connection.release_mode}</prop>
				<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>

			</props>
		</property>
		<!-- 扫描某包下的所有持久化对象 -->
		<property name="packagesToScan" value="com.vking" />
		<!-- 根据文件夹搜索ODM映射文件 -->
		<property name="mappingDirectoryLocations">
			<list>
				<value>mappings</value>
			</list>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->


	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 事务执行方式 REQUIRED：指定当前方法必需在事务环境中运行， 如果当前有事务环境就加入当前正在执行的事务环境， 如果当前没有事务，就新建一个事务。 
				这是默认值。 -->
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="import*" propagation="REQUIRED" />
			<!-- 指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。 查询定义即可 
				read-only="true" 表示只读 -->
			<tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
		</tx:attributes>
	</tx:advice>


	<bean id="dataRepositoryAspect" class="com.vking.aop.DataRepositoryAspect" />

	<aop:config>
		<aop:pointcut id="repositoryImpOperation"
			expression="execution(* com.vking.*.dao.*RepositoryImp.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="repositoryImpOperation" />
		<aop:aspect ref="dataRepositoryAspect">
			<aop:after pointcut-ref="repositoryImpOperation" method="after" />
			<aop:before pointcut-ref="repositoryImpOperation" method="before" />
			<aop:after-returning pointcut-ref="repositoryImpOperation"
				method="afterReturn" returning="returning"/>
			<aop:after-throwing pointcut-ref="repositoryImpOperation"
				method="afterThrowing" throwing="throwing" />
		</aop:aspect>
	</aop:config>

	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

</beans>
